1. inorderTraversal
/// tow nested loop. 1.first push all the left ele in stack. 2.pop one by one store in al 3. move right;

2. preorderTraversal
/// preorder follows root, left, right. since its stack we are using we need to pish right first and then left

3. postOrderTraverasl
 //1 puhs root in fir Stack
 //2 loop while fir is not empty()
        //1. pop a node from fir and move to second
        //2. if popped node has children push into first
 //3 pirnt contents of second stack.

4. Kth Smallest Element In BSTree
///  Do inorderTraversal , store in AL, return al.get(K-1)

5. Right View Of Binary Tree
///  Do level order and pop the items from q till the size of previous level and add the last node in AL.

6. Reverse Level Order
/// Do level order but store every ele in stacks, 2. pop all ele from stack and add to AL, return AL.

7. ZigZag Level Order Traversal BT(Amazon)
/// idea use two stack to store each level , in odd numbre of levels, one extra empty AL is added, So add only when AL is not empty
public class Solution {

8. Least Common Ancestor(Am, Fb, Go)
/// Idea:lca + 2 base cond  1. null check 2. if  root equals to B or C return root
//           + 2 rec one for left then right
//           + 3 cases - 1. if(left and right both not null) return root
//                      2. if(left!=null && right==null) return left
//                      3. else ret right;

9. Search in BT
// 2 bc + search in left, then right

10. Diagonal Traversal(Amazon) O(n)
// Idea: Level Order - push root, print root, then push left node into q and update ptr to right of root.

11. 2-Sum Binary Tree(Am)
/// 1. given bst , Inorder on BST is sorted array
    2. two ptr search in AL

12. Height of Tree(Fb)
/// return Math.max(maxDepth(A.left), maxDepth(A.right)) +1;

13. Min Depth Of Binary Tree(fb,Am)
/// 3 cases - to find path from root to nearest leaf  and leaf = if(A.left==null && A.right==null)
  // 1. if leaf  ret 1;
  // 2. if left null but right not null - move right - ret fun(A.right)+1;
  // 3. vice versa = ret fun(A.left)+1;
  // 4. else ret min(fun(A.left), fun(A.right))+1;

14. Vertical Order Traversal Of Binary Tree(Am)
/// idea: to print node in each vertical level starting from leftmost
// level order for each level and d =0; and maintain a treemap<int, AL>
1. push (root,d) in q - if move left push(root.left,d-1) - if move right push(root.right,d+1);
2. for each level - if (map.containsKey(d))  push that ele in AL , else make new AL and add in maxDepth
3. print ele of treemap

x15. Sum Root To Leaf Numbers(Go)
/// idea:  recur left anf right  line 10 , -> first left part wil be complteted ,
// if leaf reached return the processed value,  + ans from right tree;

16. Path Sum(am)
/// idea: since ans can be from rst or lst = > ret fun(root.left) || fun(root.right)
  //now what we have do is calculate the left sum till it reaches leaf and see if equal to given sum
  // starting the fun , add the curr root.val and // bc if root==leaf ret(curr_sum==givensum)


x17. Root To Leaf Paths With Sum(AM)(vvvgd)
///  idea : need to maintain track of sum from root to curr node and ele through this path
// bc. if null ||  leaf && curr_sum+A.val !=B return
//   else if leaf && leaf && curr_sum+A.val ==B
// {  4 steps - 1. add curr ele in AL 2
// 2. ans.add(new AL<>(al1)
// 3.  remove the currently added ele
// 4 return // complete prev parent call

ArrayList<Integer> ans = new ArrayList<>(//pass anything here , st,q, al) // will has the ele in same order irr of property st,q,al

18. Invert Binary tree
// idea: recur left, right then swap the nodes

19. Flatten Binary tree
 // idea : either do preorder and append ele in right in a  new tree
 // 2. observe the order is right left node , use rec stack and add those values in a new tree.
